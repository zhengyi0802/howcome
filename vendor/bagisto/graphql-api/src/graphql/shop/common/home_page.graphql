# Shop\Common\HopePage Related APIs
extend type Query {
    getDefaultChannel: Channel @field(resolver: "Webkul\\GraphQLAPI\\Queries\\Shop\\Common\\HomePageQuery@getDefaultChannel")

    themeCustomization: [FrontTheme!] @field(resolver: "Webkul\\GraphQLAPI\\Queries\\Shop\\Common\\HomePageQuery@getThemeCustomizationData")

    # homeCategories(input: [FilterHomeCategoriesInput]): [Category!] @field(resolver: "Webkul\\GraphQLAPI\\Queries\\Shop\\Common\\HomePageQuery@getCategories")
    homeCategories(id: ID input: [FilterHomeCategoriesInput]): [Category!] @field(resolver: "Webkul\\GraphQLAPI\\Queries\\Shop\\Common\\HomePageQuery@getCategories")

    allProducts(
        input: [FilterAllProductsInput]
        @builder(method: "Webkul\\GraphQLAPI\\Queries\\Shop\\Common\\HomePageQuery@getAllProducts")
    ): [Product!]
    @paginate(
        type: "PAGINATOR"
        defaultCount: 10
        model: "Webkul\\GraphQLAPI\\Models\\Catalog\\Product"
    )

    notificationList(
        first: Int,
        page: Int
    ): [Notification!] @paginate(type: "PAGINATOR" defaultCount:10 model:"Webkul\\GraphQLAPI\\Models\\PushNotification")
}

extend type Mutation {
    sendNotification(
        input: NotificationInput!
    ): NotificationResponse @field(resolver: "Webkul\\GraphQLAPI\\Mutations\\Shop\\Common\\NotificationMutation@send")
}

input FilterHomeCategoriesInput {
    key: String
    value: String
}

input FilterAllProductsInput {
    key: String
    value: String
}

input NotificationInput {
    id: ID!
}

type FrontTheme {
    id: Int
    channelId: Int @rename(attribute: "channel_id")
    type: String!
    name: String
    sortOrder: Int @rename(attribute: "sort_order")
    status: Int
    baseUrl: String @rename(attribute: "base_url")
    translations: [FrontThemeTranslation!]
}

type FrontThemeTranslation {
    id: ID!
    themeCustomizationId: Int! @rename(attribute: "theme_customization_id")
    locale: String!
    options: OptionFields!
}

type OptionFields {
    title: String
    css: String
    html: String
    images: [Link]
    filters: [FilterOption]
    column_1: [ColumOption]
    column_2: [ColumOption]
    column_3: [ColumOption]
}

type Link {
    link: String
    image: String
    imageUrl: String @rename(attribute: "image_url")
}

type FilterOption {
    value: String
    key: String
}

type ColumOption {
    url: String
    title: String
    sortOrder: String @rename(attribute: "sort_order")
}

type Notification {
    id: ID!
    image: String
    imageUrl: String @rename(attribute: "image_url")
    type: String
    productCategoryId: ID @rename(attribute: "product_category_id")
    status: Boolean
    createdAt: DateTime @rename(attribute: "created_at")
    updatedAt: DateTime @rename(attribute: "updated_at")
    translations: [NotificationTranslation!] @hasMany
}

type NotificationTranslation {
    id: ID!
    title: String!
    content: String!
    locale: String!
    channel: String!
    pushNotificationId: ID! @rename(attribute: "push_notification_id")
}

type NotificationResponse {
    status: Boolean
    success: String
    messageId: String @rename(attribute: "message_id")
}
